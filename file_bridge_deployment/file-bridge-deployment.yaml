apiVersion: apps/v1
kind: Deployment
metadata:
  name: file-bridge-BRIDGE_NAME
  namespace: file-bridges
  labels:
    app: file-bridge
    bridge-name: BRIDGE_NAME
    component: deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: file-bridge
      bridge-name: BRIDGE_NAME
  template:
    metadata:
      labels:
        app: file-bridge
        bridge-name: BRIDGE_NAME
        component: pod
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      # SSH key setup container
      - name: ssh-setup
        image: alpine:3.20.3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
              - ALL
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e
          echo "🔑 Setting up SSH keys and configuration..."
          
          # Install SSH client
          apk add --no-cache openssh-client
          
          # Create SSH directory
          mkdir -p /etc/ssh-keys/.ssh
          chmod 700 /etc/ssh-keys/.ssh
          
          # Copy SSH keys from secret
          cp /tmp/ssh-secret/* /etc/ssh-keys/
          chmod 600 /etc/ssh-keys/id_rsa
          chmod 644 /etc/ssh-keys/id_rsa.pub
          
          # Generate SSH host keys for SFTP server
          ssh-keygen -t rsa -b 2048 -f /etc/ssh-keys/ssh_host_rsa_key -N ""
          
          # Create SSH config
          sed "s/TARGET_HOST/${TARGET_HOST}/g; s/SSH_USER/${SSH_USER}/g" \
              /tmp/config/ssh-config-template > /etc/ssh-keys/.ssh/config
          chmod 600 /etc/ssh-keys/.ssh/config
          
          # Test SSH connection
          echo "🔍 Testing SSH connection to ${TARGET_HOST}..."
          ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no \
              -i /etc/ssh-keys/id_rsa "${SSH_USER}@${TARGET_HOST}" \
              "echo 'SSH connection test successful'"
          
          echo "✅ SSH setup completed"
        env:
        - name: TARGET_HOST
          value: "TARGET_HOST_VALUE"
        - name: SSH_USER
          value: "SSH_USER_VALUE"
        volumeMounts:
        - name: ssh-keys
          mountPath: /etc/ssh-keys
        - name: ssh-secret
          mountPath: /tmp/ssh-secret
          readOnly: true
        - name: config
          mountPath: /tmp/config
          readOnly: true
      
      # SSHFS mount container
      - name: sshfs-mount
        image: alpine:3.20.3
        securityContext:
          privileged: true
          capabilities:
            add:
              - SYS_ADMIN
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e
          echo "📁 Setting up SSHFS mount..."
          
          # Install required packages
          apk add --no-cache sshfs fuse
          
          # Create mount point
          mkdir -p /data
          
          # Mount remote filesystem
          echo "🔗 Mounting ${SSH_USER}@${TARGET_HOST}:${REMOTE_PATH} to /data"
          sshfs "${SSH_USER}@${TARGET_HOST}:${REMOTE_PATH}" /data \
              $(cat /tmp/config/sshfs-options-template) \
              -o IdentityFile=/etc/ssh-keys/id_rsa
          
          # Verify mount
          if mountpoint -q /data; then
              echo "✅ SSHFS mount successful"
              ls -la /data/ || echo "⚠️  Remote directory empty or inaccessible"
          else
              echo "❌ SSHFS mount failed"
              exit 1
          fi
          
          echo "📁 SSHFS setup completed"
        env:
        - name: TARGET_HOST
          value: "TARGET_HOST_VALUE"
        - name: SSH_USER
          value: "SSH_USER_VALUE"  
        - name: REMOTE_PATH
          value: "REMOTE_PATH_VALUE"
        volumeMounts:
        - name: ssh-keys
          mountPath: /etc/ssh-keys
          readOnly: true
        - name: data
          mountPath: /data
          mountPropagation: Bidirectional
        - name: config
          mountPath: /tmp/config
          readOnly: true
      
      containers:
      # Main SFTP server container
      - name: sftp-server
        image: alpine:3.20.3
        ports:
        - containerPort: SFTP_PORT
          name: sftp
          protocol: TCP
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
              - ALL
            add:
              - CHOWN
              - SETGID
              - SETUID
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e
          echo "🚀 Starting SFTP bridge server..."
          
          # Install OpenSSH server
          apk add --no-cache openssh-server
          
          # Create SFTP user
          adduser -D -s /usr/sbin/nologin bridge-user
          
          # Setup SSH directory for SFTP user
          mkdir -p /home/bridge-user/.ssh
          cp /etc/ssh-keys/id_rsa.pub /home/bridge-user/.ssh/authorized_keys
          chown -R bridge-user:bridge-user /home/bridge-user/.ssh
          chmod 700 /home/bridge-user/.ssh
          chmod 600 /home/bridge-user/.ssh/authorized_keys
          
          # Create SFTP configuration
          sed "s/SFTP_PORT/${SFTP_PORT}/g" /tmp/config/sftp-config-template > /etc/ssh/sshd_config
          
          # Set up chroot directory
          mkdir -p /sftp-root/data
          chown root:root /sftp-root
          chmod 755 /sftp-root
          chown bridge-user:bridge-user /sftp-root/data
          
          # Bind mount the SSHFS mount into chroot
          mount --bind /data /sftp-root/data
          
          # Enforce permissions based on access mode
          /opt/scripts/permission-enforcer.sh
          
          # Start SSHD
          echo "🔑 Starting SFTP server on port ${SFTP_PORT}..."
          /usr/sbin/sshd -D -e
        env:
        - name: SFTP_PORT
          value: "SFTP_PORT_VALUE"
        - name: ACCESS_MODE
          value: "ACCESS_MODE_VALUE"
        - name: BRIDGE_NAME
          value: "BRIDGE_NAME"
        volumeMounts:
        - name: ssh-keys
          mountPath: /etc/ssh-keys
          readOnly: true
        - name: data
          mountPath: /data
          mountPropagation: HostToContainer
        - name: config
          mountPath: /tmp/config
          readOnly: true
        - name: scripts
          mountPath: /opt/scripts
          readOnly: true
        livenessProbe:
          tcpSocket:
            port: SFTP_PORT
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: SFTP_PORT
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      
      # Health monitoring sidecar
      - name: health-monitor
        image: alpine:3.18
        command: ["/bin/sh", "/opt/scripts/monitor.sh"]
        env:
        - name: BRIDGE_NAME
          value: "BRIDGE_NAME"
        - name: TARGET_HOST
          value: "TARGET_HOST_VALUE"
        - name: SSH_USER
          value: "SSH_USER_VALUE"
        - name: REMOTE_PATH
          value: "REMOTE_PATH_VALUE"
        - name: ACCESS_MODE
          value: "ACCESS_MODE_VALUE"
        volumeMounts:
        - name: data
          mountPath: /data
          mountPropagation: HostToContainer
        - name: scripts
          mountPath: /opt/scripts
          readOnly: true
        - name: config
          mountPath: /opt/config
          readOnly: true
        - name: ssh-keys
          mountPath: /etc/ssh-keys
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      volumes:
      - name: ssh-keys
        emptyDir: {}
      - name: data
        emptyDir: {}
      - name: ssh-secret
        secret:
          secretName: file-bridge-ssh-BRIDGE_NAME
          defaultMode: 0600
      - name: config
        configMap:
          name: file-bridge-template
          defaultMode: 0644
      - name: scripts
        configMap:
          name: file-bridge-template
          defaultMode: 0755
          items:
          - key: permission-enforcer.sh
            path: permission-enforcer.sh
          - key: healthcheck.sh
            path: healthcheck.sh
          - key: monitor.sh
            path: monitor.sh
      
      restartPolicy: Always
      
---
apiVersion: v1
kind: Service
metadata:
  name: file-bridge-BRIDGE_NAME
  namespace: file-bridges
  labels:
    app: file-bridge
    bridge-name: BRIDGE_NAME
    component: service
spec:
  type: ClusterIP
  selector:
    app: file-bridge
    bridge-name: BRIDGE_NAME
  ports:
  - name: sftp
    port: SFTP_PORT
    targetPort: SFTP_PORT
    protocol: TCP